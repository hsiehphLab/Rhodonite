import os
import sys
import math
import pandas as pd
from snakemake.utils import min_version

min_version("6.0")

S_DIR = os.path.realpath(os.path.dirname(srcdir("Snakefile")))
shell.prefix(f"set -eo pipefail;")


TEMP_DIR = config.pop("tempdir", "temp")
if TEMP_DIR != "temp":
    if os.path.exists("temp"):
        if os.path.islink("temp") and os.path.realpath("temp") == os.path.realpath(
            TEMP_DIR
        ):
            print("The temp dir has already been linked.")
        else:
            sys.exit("temp/ already in use, please move it before running.")
    else:
        shell("ln -s {TEMP_DIR} temp")


n_records = config.pop("n_records", 40)
try:
    for sample, ref in config["samples"].items():
        sys.stderr.write(f"Processing the index for {sample}: {ref}.fai\n")
        try:
            df = pd.read_csv(f"{ref}.fai", sep="\t", header=None)
        except:
            sys.stderr.write(f"{ref}.fai must exist and be readable!")
            sys.exit(1)

        if df.shape[0] > 0 & df.shape[0] < n_records:
            n_records = df.shape[0]
except:
    sys.stderr.write(
        f"""samples must be configured as a dict of sample reference pairs in the yaml. e.g.

samples:
    test: ./test/test.fa
    test2: ./test/test2.fa
"""
    )
    sys.exit(1)


scattergather:
    fasta=n_records,


include: "rules/split.smk"
include: "rules/RepeatMasker.smk"
include: "rules/DupMasker.smk"
include: "rules/trf.smk"
include: "rules/windowmasker.smk"


rule all:
    input:
        fasta=gather.fasta(
            rules.split_fasta.output.fasta, sample=config["samples"].keys()
        ),
        trf=expand(rules.trf.output, sample=config["samples"].keys()),
        RepeatMasker=expand(
            rules.RepeatMasker.output, sample=config["samples"].keys()
        ),
        DupMasker=expand(rules.DupMasker.output, sample=config["samples"].keys()),
        windowmasker=expand(
            rules.windowmasker.output, sample=config["samples"].keys()
        ),


config = {
    "samples": {
        "test": "ref.fasta",
        "test2": "ref2.fasta",
        "test3": "ref3.fasta",
        "test4": "ref4.fasta",
    }
}
